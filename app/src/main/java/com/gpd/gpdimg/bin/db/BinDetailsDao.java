package com.gpd.gpdimg.bin.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table "BIN_DETAILS".
*/
public class BinDetailsDao extends AbstractDao<BinDetails, Long> {

    public static final String TABLENAME = "BIN_DETAILS";

    /**
     * Properties of entity BinDetails.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Governorate_id = new Property(1, String.class, "governorate_id", false, "GOVERNORATE_ID");
        public final static Property Willayat_id = new Property(2, String.class, "willayat_id", false, "WILLAYAT_ID");
        public final static Property Capacity_id = new Property(3, String.class, "capacity_id", false, "CAPACITY_ID");
        public final static Property Manufacturer_id = new Property(4, String.class, "manufacturer_id", false, "MANUFACTURER_ID");
        public final static Property Scan_type = new Property(5, String.class, "scan_type", false, "SCAN_TYPE");
        public final static Property Bin_rfid = new Property(6, String.class, "bin_rfid", false, "BIN_RFID");
        public final static Property Bin_lat = new Property(7, String.class, "bin_lat", false, "BIN_LAT");
        public final static Property Bin_longi = new Property(8, String.class, "bin_longi", false, "BIN_LONGI");
        public final static Property Manual_entry = new Property(9, String.class, "manual_entry", false, "MANUAL_ENTRY");
        public final static Property Bin_status = new Property(10, String.class, "bin_status", false, "BIN_STATUS");
        public final static Property Bin_time = new Property(11, String.class, "bin_time", false, "BIN_TIME");
        public final static Property Company_id = new Property(12, String.class, "company_id", false, "COMPANY_ID");
    }


    public BinDetailsDao(DaoConfig config) {
        super(config);
    }
    
    public BinDetailsDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"BIN_DETAILS\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"GOVERNORATE_ID\" TEXT," + // 1: governorate_id
                "\"WILLAYAT_ID\" TEXT," + // 2: willayat_id
                "\"CAPACITY_ID\" TEXT," + // 3: capacity_id
                "\"MANUFACTURER_ID\" TEXT," + // 4: manufacturer_id
                "\"SCAN_TYPE\" TEXT," + // 5: scan_type
                "\"BIN_RFID\" TEXT," + // 6: bin_rfid
                "\"BIN_LAT\" TEXT," + // 7: bin_lat
                "\"BIN_LONGI\" TEXT," + // 8: bin_longi
                "\"MANUAL_ENTRY\" TEXT," + // 9: manual_entry
                "\"BIN_STATUS\" TEXT," + // 10: bin_status
                "\"BIN_TIME\" TEXT," + // 11: bin_time
                "\"COMPANY_ID\" TEXT);"); // 12: company_id
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"BIN_DETAILS\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, BinDetails entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String governorate_id = entity.getGovernorate_id();
        if (governorate_id != null) {
            stmt.bindString(2, governorate_id);
        }
 
        String willayat_id = entity.getWillayat_id();
        if (willayat_id != null) {
            stmt.bindString(3, willayat_id);
        }
 
        String capacity_id = entity.getCapacity_id();
        if (capacity_id != null) {
            stmt.bindString(4, capacity_id);
        }
 
        String manufacturer_id = entity.getManufacturer_id();
        if (manufacturer_id != null) {
            stmt.bindString(5, manufacturer_id);
        }
 
        String scan_type = entity.getScan_type();
        if (scan_type != null) {
            stmt.bindString(6, scan_type);
        }
 
        String bin_rfid = entity.getBin_rfid();
        if (bin_rfid != null) {
            stmt.bindString(7, bin_rfid);
        }
 
        String bin_lat = entity.getBin_lat();
        if (bin_lat != null) {
            stmt.bindString(8, bin_lat);
        }
 
        String bin_longi = entity.getBin_longi();
        if (bin_longi != null) {
            stmt.bindString(9, bin_longi);
        }
 
        String manual_entry = entity.getManual_entry();
        if (manual_entry != null) {
            stmt.bindString(10, manual_entry);
        }
 
        String bin_status = entity.getBin_status();
        if (bin_status != null) {
            stmt.bindString(11, bin_status);
        }
 
        String bin_time = entity.getBin_time();
        if (bin_time != null) {
            stmt.bindString(12, bin_time);
        }
 
        String company_id = entity.getCompany_id();
        if (company_id != null) {
            stmt.bindString(13, company_id);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, BinDetails entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String governorate_id = entity.getGovernorate_id();
        if (governorate_id != null) {
            stmt.bindString(2, governorate_id);
        }
 
        String willayat_id = entity.getWillayat_id();
        if (willayat_id != null) {
            stmt.bindString(3, willayat_id);
        }
 
        String capacity_id = entity.getCapacity_id();
        if (capacity_id != null) {
            stmt.bindString(4, capacity_id);
        }
 
        String manufacturer_id = entity.getManufacturer_id();
        if (manufacturer_id != null) {
            stmt.bindString(5, manufacturer_id);
        }
 
        String scan_type = entity.getScan_type();
        if (scan_type != null) {
            stmt.bindString(6, scan_type);
        }
 
        String bin_rfid = entity.getBin_rfid();
        if (bin_rfid != null) {
            stmt.bindString(7, bin_rfid);
        }
 
        String bin_lat = entity.getBin_lat();
        if (bin_lat != null) {
            stmt.bindString(8, bin_lat);
        }
 
        String bin_longi = entity.getBin_longi();
        if (bin_longi != null) {
            stmt.bindString(9, bin_longi);
        }
 
        String manual_entry = entity.getManual_entry();
        if (manual_entry != null) {
            stmt.bindString(10, manual_entry);
        }
 
        String bin_status = entity.getBin_status();
        if (bin_status != null) {
            stmt.bindString(11, bin_status);
        }
 
        String bin_time = entity.getBin_time();
        if (bin_time != null) {
            stmt.bindString(12, bin_time);
        }
 
        String company_id = entity.getCompany_id();
        if (company_id != null) {
            stmt.bindString(13, company_id);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public BinDetails readEntity(Cursor cursor, int offset) {
        BinDetails entity = new BinDetails( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // governorate_id
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // willayat_id
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // capacity_id
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // manufacturer_id
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // scan_type
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // bin_rfid
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // bin_lat
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // bin_longi
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // manual_entry
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // bin_status
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // bin_time
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12) // company_id
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, BinDetails entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setGovernorate_id(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setWillayat_id(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setCapacity_id(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setManufacturer_id(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setScan_type(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setBin_rfid(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setBin_lat(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setBin_longi(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setManual_entry(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setBin_status(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setBin_time(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setCompany_id(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(BinDetails entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(BinDetails entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(BinDetails entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
