package com.gpd.gpdimg.bin.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table "CAPACITY".
*/
public class CapacityDao extends AbstractDao<Capacity, Long> {

    public static final String TABLENAME = "CAPACITY";

    /**
     * Properties of entity Capacity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Status = new Property(1, String.class, "status", false, "STATUS");
        public final static Property Capacity_id = new Property(2, String.class, "capacity_id", false, "CAPACITY_ID");
        public final static Property Capacity_name = new Property(3, String.class, "capacity_name", false, "CAPACITY_NAME");
        public final static Property Capacity_value = new Property(4, String.class, "capacity_value", false, "CAPACITY_VALUE");
    }


    public CapacityDao(DaoConfig config) {
        super(config);
    }
    
    public CapacityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CAPACITY\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"STATUS\" TEXT," + // 1: status
                "\"CAPACITY_ID\" TEXT," + // 2: capacity_id
                "\"CAPACITY_NAME\" TEXT," + // 3: capacity_name
                "\"CAPACITY_VALUE\" TEXT);"); // 4: capacity_value
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CAPACITY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Capacity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String status = entity.getStatus();
        if (status != null) {
            stmt.bindString(2, status);
        }
 
        String capacity_id = entity.getCapacity_id();
        if (capacity_id != null) {
            stmt.bindString(3, capacity_id);
        }
 
        String capacity_name = entity.getCapacity_name();
        if (capacity_name != null) {
            stmt.bindString(4, capacity_name);
        }
 
        String capacity_value = entity.getCapacity_value();
        if (capacity_value != null) {
            stmt.bindString(5, capacity_value);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Capacity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String status = entity.getStatus();
        if (status != null) {
            stmt.bindString(2, status);
        }
 
        String capacity_id = entity.getCapacity_id();
        if (capacity_id != null) {
            stmt.bindString(3, capacity_id);
        }
 
        String capacity_name = entity.getCapacity_name();
        if (capacity_name != null) {
            stmt.bindString(4, capacity_name);
        }
 
        String capacity_value = entity.getCapacity_value();
        if (capacity_value != null) {
            stmt.bindString(5, capacity_value);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Capacity readEntity(Cursor cursor, int offset) {
        Capacity entity = new Capacity( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // status
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // capacity_id
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // capacity_name
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4) // capacity_value
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Capacity entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setStatus(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setCapacity_id(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setCapacity_name(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setCapacity_value(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Capacity entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Capacity entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Capacity entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
