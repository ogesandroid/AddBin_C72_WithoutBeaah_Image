package com.gpd.gpdimg.bin.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table "WILLAYAT".
*/
public class WillayatDao extends AbstractDao<Willayat, Long> {

    public static final String TABLENAME = "WILLAYAT";

    /**
     * Properties of entity Willayat.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Status = new Property(1, String.class, "status", false, "STATUS");
        public final static Property Willayat_id = new Property(2, String.class, "willayat_id", false, "WILLAYAT_ID");
        public final static Property Willayat_name = new Property(3, String.class, "willayat_name", false, "WILLAYAT_NAME");
        public final static Property Willayat_value = new Property(4, String.class, "willayat_value", false, "WILLAYAT_VALUE");
        public final static Property Governorate_id = new Property(5, String.class, "governorate_id", false, "GOVERNORATE_ID");
    }


    public WillayatDao(DaoConfig config) {
        super(config);
    }
    
    public WillayatDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"WILLAYAT\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"STATUS\" TEXT," + // 1: status
                "\"WILLAYAT_ID\" TEXT," + // 2: willayat_id
                "\"WILLAYAT_NAME\" TEXT," + // 3: willayat_name
                "\"WILLAYAT_VALUE\" TEXT," + // 4: willayat_value
                "\"GOVERNORATE_ID\" TEXT);"); // 5: governorate_id
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"WILLAYAT\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Willayat entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String status = entity.getStatus();
        if (status != null) {
            stmt.bindString(2, status);
        }
 
        String willayat_id = entity.getWillayat_id();
        if (willayat_id != null) {
            stmt.bindString(3, willayat_id);
        }
 
        String willayat_name = entity.getWillayat_name();
        if (willayat_name != null) {
            stmt.bindString(4, willayat_name);
        }
 
        String willayat_value = entity.getWillayat_value();
        if (willayat_value != null) {
            stmt.bindString(5, willayat_value);
        }
 
        String governorate_id = entity.getGovernorate_id();
        if (governorate_id != null) {
            stmt.bindString(6, governorate_id);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Willayat entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String status = entity.getStatus();
        if (status != null) {
            stmt.bindString(2, status);
        }
 
        String willayat_id = entity.getWillayat_id();
        if (willayat_id != null) {
            stmt.bindString(3, willayat_id);
        }
 
        String willayat_name = entity.getWillayat_name();
        if (willayat_name != null) {
            stmt.bindString(4, willayat_name);
        }
 
        String willayat_value = entity.getWillayat_value();
        if (willayat_value != null) {
            stmt.bindString(5, willayat_value);
        }
 
        String governorate_id = entity.getGovernorate_id();
        if (governorate_id != null) {
            stmt.bindString(6, governorate_id);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Willayat readEntity(Cursor cursor, int offset) {
        Willayat entity = new Willayat( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // status
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // willayat_id
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // willayat_name
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // willayat_value
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5) // governorate_id
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Willayat entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setStatus(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setWillayat_id(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setWillayat_name(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setWillayat_value(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setGovernorate_id(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Willayat entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Willayat entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Willayat entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
